// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.1
// source: proto/cmnt.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'cmnt';

export enum CmntType {
  MSG = 0,
  INFO = 1,
  UNRECOGNIZED = -1,
}

export enum ContentType {
  TEXT = 0,
  IMAGE = 1,
  VIDEO = 2,
  AUDIO = 3,
  FILE = 4,
  UNRECOGNIZED = -1,
}

export interface Cmnt {
  id: string;
  taskId: string;
  senderId: string;
  cmntType: CmntType;
  contentType: ContentType;
  content: string;
  mediaUrl: string;
  isEdited: boolean;
  isDeleted: boolean;
  taggedUser: string[];
  replyTo: string;
  createdAt: string;
  updatedAt: string;
}

export interface AddCmntRequest {
  taskId: string;
  senderId: string;
  cmntType: CmntType;
  contentType: ContentType;
  content: string;
  mediaUrl: string;
  replyTo: string;
  taggedUser: string[];
  isTaskUpdate: boolean;
}

export interface EditCmntRequest {
  cmntId: string;
  senderId: string;
  content: string;
  taggedUser: string[];
}

export interface DeleteCmntRequest {
  cmntId: string;
  senderId: string;
}

export interface GetCmntsByTaskRequest {
  taskId: string;
}

export interface CmntResponse {
  cmnt: Cmnt | undefined;
}

export interface CmntListResponse {
  cmnts: Cmnt[];
}

export interface DeleteCmntResponse {
  message: string;
  success: boolean;
}

export const CMNT_PACKAGE_NAME = 'cmnt';

export interface CmntServiceClient {
  addCmnt(request: AddCmntRequest): Observable<CmntResponse>;

  editCmnt(request: EditCmntRequest): Observable<CmntResponse>;

  deleteCmnt(request: DeleteCmntRequest): Observable<DeleteCmntResponse>;

  getCmntsByTask(request: GetCmntsByTaskRequest): Observable<CmntListResponse>;
}

export interface CmntServiceController {
  addCmnt(
    request: AddCmntRequest,
  ): Promise<CmntResponse> | Observable<CmntResponse> | CmntResponse;

  editCmnt(
    request: EditCmntRequest,
  ): Promise<CmntResponse> | Observable<CmntResponse> | CmntResponse;

  deleteCmnt(
    request: DeleteCmntRequest,
  ):
    | Promise<DeleteCmntResponse>
    | Observable<DeleteCmntResponse>
    | DeleteCmntResponse;

  getCmntsByTask(
    request: GetCmntsByTaskRequest,
  ):
    | Promise<CmntListResponse>
    | Observable<CmntListResponse>
    | CmntListResponse;
}

export function CmntServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'addCmnt',
      'editCmnt',
      'deleteCmnt',
      'getCmntsByTask',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('CmntService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('CmntService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const CMNT_SERVICE_NAME = 'CmntService';
