// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.1
// source: proto/notify.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "notify";

export interface Notification {
  id: string;
  createdAt: string;
  updatedAt: string;
  participants: string[];
  /** Tracks read/unread status for each participant */
  readStatus: { [key: string]: boolean };
  title: string;
  desc: string;
  refId: string;
  refName: string;
  notifyType: string;
}

export interface Notification_ReadStatusEntry {
  key: string;
  value: boolean;
}

export interface CreateNotificationRequest {
  title: string;
  desc: string;
  participants: string[];
  refId: string;
  refName: string;
  notifyType: string;
}

export interface CreateNotificationResponse {
  notification: Notification | undefined;
}

export interface GetNotificationsRequest {
  userId: string;
  cursor: string;
  limit: number;
}

export interface GetNotificationsResponse {
  notifications: Notification[];
  nextCursor: string;
  hasMore: boolean;
}

export interface UpdateNotificationRequest {
  id: string;
  title: string;
  desc: string;
  isRead: boolean;
  /** Specifies which participant's read status to update */
  userId: string;
}

export interface UpdateNotificationResponse {
  notification: Notification | undefined;
}

export interface DeleteNotificationRequest {
  id: string;
}

export interface DeleteNotificationResponse {
  message: string;
  success: boolean;
}

export interface MarkAllAsReadRequest {
  userId: string;
}

export interface MarkAllAsReadResponse {
  message: string;
  success: boolean;
}

export const NOTIFY_PACKAGE_NAME = "notify";

export interface NotifyServiceClient {
  createNotification(request: CreateNotificationRequest): Observable<CreateNotificationResponse>;

  getNotifications(request: GetNotificationsRequest): Observable<GetNotificationsResponse>;

  updateNotification(request: UpdateNotificationRequest): Observable<UpdateNotificationResponse>;

  deleteNotification(request: DeleteNotificationRequest): Observable<DeleteNotificationResponse>;

  markAllAsRead(request: MarkAllAsReadRequest): Observable<MarkAllAsReadResponse>;
}

export interface NotifyServiceController {
  createNotification(
    request: CreateNotificationRequest,
  ): Promise<CreateNotificationResponse> | Observable<CreateNotificationResponse> | CreateNotificationResponse;

  getNotifications(
    request: GetNotificationsRequest,
  ): Promise<GetNotificationsResponse> | Observable<GetNotificationsResponse> | GetNotificationsResponse;

  updateNotification(
    request: UpdateNotificationRequest,
  ): Promise<UpdateNotificationResponse> | Observable<UpdateNotificationResponse> | UpdateNotificationResponse;

  deleteNotification(
    request: DeleteNotificationRequest,
  ): Promise<DeleteNotificationResponse> | Observable<DeleteNotificationResponse> | DeleteNotificationResponse;

  markAllAsRead(
    request: MarkAllAsReadRequest,
  ): Promise<MarkAllAsReadResponse> | Observable<MarkAllAsReadResponse> | MarkAllAsReadResponse;
}

export function NotifyServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createNotification",
      "getNotifications",
      "updateNotification",
      "deleteNotification",
      "markAllAsRead",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotifyService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotifyService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFY_SERVICE_NAME = "NotifyService";
